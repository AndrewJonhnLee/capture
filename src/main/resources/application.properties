server.port=8089

#多环境配置
spring.profiles.active=dev
#启用远程更新
spring.devtools.remote.secret=1234
#spring.devtools.remote.debug.enabled=true
#spring.devtools.livereload.enabled=true

#远程调试默认使用的端口是 8000 ，你可以通过 spring.devtools.remote.debug.local-port 来修改。其他使用没区别,对外暴露http8000端口
#你可以通过查看JAVA_OPTS来看远程调试是否被启用，主要是观察是否有 -Xdebug -Xrunjdwp:server=y,transport=dt_socket,suspend=n 参数,不需要指定address,随机使用空闲端口
#映射到8000,避免了因为防火墙,端口无法有效访问的问题.
#必须确保远程应用开启了对远程调试的支持,然后启动RemoteSpringApplication就可以了
#java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,suspend=n -jar target/spring-boot-sample-devtools-1.4.0.BUILD-SNAPSHOT.jar
#JAVA_OPTS: "-Xdebug -Xrunjdwp:server=y,transport=dt_socket,suspend=n"

spring.devtools.restart.enabled=true
spring.devtools.restart.exclude=static/**

#application.properties中配置通用内容，并设置spring.profiles.active=dev，以开发环境为默认配置
#application-{profile}.properties中配置各个环境不同的内容
#通过java -jar xxx.jar --spring.profiles.active={}方式去激活不同环境的配置
#在命令行运行时，连续的两个减号--就是对application.properties中的属性值进行赋值的标识。所以，java -jar xxx.jar --server.port=9001命令，等价于我们在application.properties中添加属性server.port=9001，我们可通过删除该值或使用命令行来设置该值来验证。

